// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  plan          String    @default("free") // "free" or "pro"
  polarSubscriptionId String? @unique // Store Polar subscription ID if they are on a paid plan

  accounts Account[]
  sessions Session[]
  sites    Site[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Site {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  pageViewEvents  PageViewEvent[]
  eventDefinitions EventDefinition[]
  trackedEvents    TrackedEvent[] // All tracked custom events for this site

  @@index([userId])
}

model PageViewEvent {
  id        String   @id @default(cuid())
  url       String
  timestamp DateTime // The timestamp from the tracking event itself
  createdAt DateTime @default(now()) // When this record was created in our DB

  siteId String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId, timestamp])
  @@index([createdAt])
}

model EventDefinition {
  id          String   @id @default(cuid())
  name        String   // e.g., "Clicked Signup Button"
  description String?  // Optional details
  trackingId  String   // e.g., evt_signup_click - to be used in client-side tracker
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  siteId String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)

  trackedEvents TrackedEvent[] // Instances of this event being tracked

  @@unique([siteId, trackingId]) // trackingId should be unique per site
  @@index([siteId])
}

model TrackedEvent {
  id        String   @id @default(cuid())
  timestamp DateTime // Timestamp from the client when the event occurred
  metadata  Json?    // Any additional data sent with the event
  createdAt DateTime @default(now()) // When this record was created in our DB

  eventDefinitionId String
  eventDefinition   EventDefinition @relation(fields: [eventDefinitionId], references: [id], onDelete: Cascade)

  siteId String // Denormalized for easier querying of all custom events for a site
  site   Site   @relation(fields: [siteId], references: [id], onDelete: NoAction) // NoAction to prevent multiple cascade paths

  @@index([eventDefinitionId])
  @@index([siteId, timestamp])
  @@index([siteId, createdAt])
}

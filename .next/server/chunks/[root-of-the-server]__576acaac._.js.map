{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/matt/Desktop/tracker/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nlet prisma: PrismaClient;\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var __prisma: PrismaClient | undefined;\n}\n\nif (process.env.NODE_ENV === \"production\") {\n  prisma = new PrismaClient();\n} else {\n  if (!global.__prisma) {\n    global.__prisma = new PrismaClient({\n      // log: ['query', 'error', 'warn'], // Uncomment for development logging\n    });\n  }\n  prisma = global.__prisma;\n}\n\nexport const db = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI;AAOJ,uCAA2C;;AAE3C,OAAO;IACL,IAAI,CAAC,OAAO,QAAQ,EAAE;QACpB,OAAO,QAAQ,GAAG,IAAI,6HAAA,CAAA,eAAY,CAAC;QAEnC;IACF;IACA,SAAS,OAAO,QAAQ;AAC1B;AAEO,MAAM,KAAK","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///Users/matt/Desktop/tracker/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { AuthOptions } from \"next-auth\";\nimport GitHubProvider from \"next-auth/providers/github\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { db } from \"@/lib/db\"; // Assuming your Prisma client is exported as db from @/lib/db.ts\n\nif (!process.env.GITHUB_ID) {\n  throw new Error(\"Missing GITHUB_ID in .env\");\n}\nif (!process.env.GITHUB_SECRET) {\n  throw new Error(\"Missing GITHUB_SECRET in .env\");\n}\nif (!process.env.NEXTAUTH_SECRET) {\n  throw new Error(\"Missing NEXTAUTH_SECRET in .env\");\n}\n\nexport const authOptions: AuthOptions = {\n  adapter: PrismaAdapter(db as any), // Cast to any due to potential minor type mismatches with specific Prisma versions\n  providers: [\n    GitHubProvider({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    }),\n    // Add other providers here if needed in the future\n  ],\n  secret: process.env.NEXTAUTH_SECRET,\n  session: {\n    strategy: \"jwt\", // Using JWT for session strategy\n  },\n  callbacks: {\n    async session({ session, token }) {\n      // Add user ID and other custom properties to the session object\n      if (token && session.user) {\n        session.user.id = token.sub; // .sub is the user id from the JWT token\n        // session.user.customProperty = token.customProperty; // Example: if you add more to token\n      }\n      return session;\n    },\n    async jwt({ token, user }) {\n      // Add custom properties to the JWT token\n      if (user) {\n        token.sub = user.id; // Persist the user id (from db) to the token\n        // token.customProperty = user.customProperty; // Example\n      }\n      return token;\n    },\n  },\n  // Optional: Add custom pages for sign-in, sign-out, error, etc.\n  // pages: {\n  //   signIn: '/auth/signin',\n  // },\n};\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,sMAA+B,iEAAiE;;;;;AAEhG,IAAI,CAAC,QAAQ,GAAG,CAAC,SAAS,EAAE;IAC1B,MAAM,IAAI,MAAM;AAClB;AACA,IAAI,CAAC,QAAQ,GAAG,CAAC,aAAa,EAAE;IAC9B,MAAM,IAAI,MAAM;AAClB;AACA,IAAI,CAAC,QAAQ,GAAG,CAAC,eAAe,EAAE;IAChC,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,cAA2B;IACtC,SAAS,CAAA,GAAA,iVAAA,CAAA,gBAAa,AAAD,EAAE,kHAAA,CAAA,KAAE;IACzB,WAAW;QACT,CAAA,GAAA,mYAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,SAAS;YAC/B,cAAc,QAAQ,GAAG,CAAC,aAAa;QACzC;KAED;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,gEAAgE;YAChE,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACzB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG,EAAE,yCAAyC;YACtE,2FAA2F;YAC7F;YACA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,yCAAyC;YACzC,IAAI,MAAM;gBACR,MAAM,GAAG,GAAG,KAAK,EAAE,EAAE,6CAA6C;YAClE,yDAAyD;YAC3D;YACA,OAAO;QACT;IACF;AAKF;AAEA,MAAM,UAAU,CAAA,GAAA,qXAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}
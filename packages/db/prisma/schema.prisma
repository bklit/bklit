generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id
  name          String
  email         String       @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  invitations   Invitation[]
  members       Member[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  activeOrganizationId String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?      @unique
  logo        String?
  createdAt   DateTime
  metadata    String?
  theme       String?
  projects    Project[]
  invitations Invitation[]
  members     Member[]

  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  userId         String
  role           String
  createdAt      DateTime
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Project {
  id               String            @id @default(cuid())
  name             String
  domain           String?           @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  organizationId   String?
  eventDefinitions EventDefinition[]
  pageViewEvents   PageViewEvent[]
  organization     Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  trackedEvents    TrackedEvent[]
  trackedSessions  TrackedSession[]

  @@index([organizationId])
}

model PageViewEvent {
  id          String          @id @default(cuid())
  url         String
  timestamp   DateTime
  createdAt   DateTime        @default(now())
  city        String?
  country     String?
  countryCode String?
  ip          String?
  isp         String?
  lat         Float?
  lon         Float?
  mobile      Boolean?
  region      String?
  regionName  String?
  timezone    String?
  zip         String?
  userAgent   String?
  sessionId   String?
  projectId   String
  project     Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  session     TrackedSession? @relation(fields: [sessionId], references: [id])

  @@index([projectId, timestamp])
  @@index([createdAt])
  @@index([country])
  @@index([city])
  @@index([sessionId])
}

model EventDefinition {
  id            String         @id @default(cuid())
  name          String
  description   String?
  trackingId    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  projectId     String
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  trackedEvents TrackedEvent[]

  @@unique([projectId, trackingId])
  @@unique([projectId, name])
  @@index([projectId])
}

model TrackedEvent {
  id                String          @id @default(cuid())
  timestamp         DateTime
  metadata          Json?
  createdAt         DateTime        @default(now())
  eventDefinitionId String
  projectId         String
  sessionId         String?
  eventDefinition   EventDefinition @relation(fields: [eventDefinitionId], references: [id], onDelete: Cascade)
  project           Project         @relation(fields: [projectId], references: [id], onDelete: NoAction)
  session           TrackedSession? @relation(fields: [sessionId], references: [id])

  @@index([eventDefinitionId])
  @@index([projectId, timestamp])
  @@index([projectId, createdAt])
  @@index([sessionId])
}

model TrackedSession {
  id             String          @id @default(cuid())
  sessionId      String          @unique
  startedAt      DateTime        @default(now())
  endedAt        DateTime?
  duration       Int?
  didBounce      Boolean         @default(false)
  visitorId      String?
  entryPage      String
  exitPage       String?
  userAgent      String?
  country        String?
  city           String?
  projectId      String
  pageViewEvents PageViewEvent[]
  trackedEvents  TrackedEvent[]
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, startedAt])
  @@index([projectId, didBounce])
  @@index([visitorId])
}
